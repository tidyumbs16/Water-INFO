// app/api/chatbot/route.ts
import { NextRequest, NextResponse } from "next/server";
import pool from "../../../../lib/db";

type Step = "idle" | "region" | "province" | "district";

interface SessionState {
  step: Step;
  region?: string;
  province?: string;
  district?: string;
}

// ‡πÄ‡∏Å‡πá‡∏ö state (demo: memory; production ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Redis/DB)
let userState: SessionState = { step: "idle" as Step };

// ‚úÖ Helper: ‡∏´‡∏≤ pattern ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (YYYY-MM-DD)
function extractDateFromText(text: string): string | null {
  const regex = /\d{4}-\d{2}-\d{2}/;
  const match = text.match(regex);
  return match ? match[0] : null;
}

export async function POST(req: NextRequest) {
  try {
    const { message } = await req.json();
    const text = String(message || "").trim();
    const lower = text.toLowerCase();

    if (!text) {
      return NextResponse.json({
        response: "‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö",
      });
    }

    // ‚úÖ reset state
    if (
      lower.includes("‡∏†‡∏≤‡∏Ñ‡∏≠‡∏∑‡πà‡∏ô") ||
      lower.includes("reset") ||
      lower.includes("‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà")
    ) {
      userState = { step: "idle" };
      return NextResponse.json({
        response:
          "üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠ '‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ' ‡πÄ‡∏ä‡πà‡∏ô '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
      });
    }

    // ‚úÖ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    if (lower.includes("‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥") || lower.includes("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á")) {
      return NextResponse.json({
        response: `üìò ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Chatbot:
1) ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠ "‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ" ‡πÄ‡∏ä‡πà‡∏ô '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠'
2) ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏ô‡∏±‡πâ‡∏ô
3) ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡∏ï‡∏õ‡∏£‡∏∞‡∏õ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
4) Bot ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥ (‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û, ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì, ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô, ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û) ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
üëâ ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô 2025-09-01 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ`,
      });
    }

    const client = await pool!.connect();
    try {
      // üü¢ Step 1: idle ‚Üí region
      if (userState.step === "idle") {
        const regionRes = await client.query(
          `SELECT DISTINCT region FROM districts WHERE region ILIKE $1 LIMIT 1`,
          [`%${text}%`]
        );
        if (regionRes.rows.length > 0) {
          const region = regionRes.rows[0].region;
          userState = { step: "region", region };
          return NextResponse.json({
            response: `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ: ${region}\n‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö`,
          });
        }
        return NextResponse.json({
          response:
            "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏ô‡∏µ‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô '‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ'",
        });
      }

      // üü¢ Step 2: region ‚Üí province
      if (userState.step === "region" && userState.region) {
        const provinceRes = await client.query(
          `SELECT DISTINCT province FROM districts WHERE region = $1 AND province ILIKE $2 LIMIT 1`,
          [userState.region, `%${text}%`]
        );
        if (provinceRes.rows.length > 0) {
          const province = provinceRes.rows[0].province;
          const districtsRes = await client.query(
            `SELECT name FROM districts WHERE province = $1 ORDER BY name ASC`,
            [province]
          );
          const districts = districtsRes.rows.map((r: any) => r.name).join(", ");
          userState = { step: "province", region: userState.region, province };
          return NextResponse.json({
            response: `üìç ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ${province} ‡∏°‡∏µ‡πÄ‡∏Ç‡∏ï‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n${districts}\n\n‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö`,
          });
        }
        return NextResponse.json({
          response: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö",
        });
      }

      // üü¢ Step 3: province ‚Üí district (+ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ñ‡∏≤‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á)
      if (userState.step === "province" && userState.province) {
        const districtRes = await client.query(
          `SELECT id, name FROM districts WHERE province = $1 AND name ILIKE $2 LIMIT 1`,
          [userState.province, `%${text}%`]
        );
        if (districtRes.rows.length > 0) {
          const d = districtRes.rows[0];
          userState = { ...userState, step: "district", district: d.name };

          // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡πÑ‡∏´‡∏°
          const dateFromText = extractDateFromText(text);
          const dateQuery = dateFromText
            ? dateFromText
            : new Date().toISOString().split("T")[0]; // default = ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ

          const metricsRes = await client.query(
            `SELECT water_quality, water_volume, pressure, efficiency, date
             FROM district_metrics_daily
             WHERE district_id = $1 AND date::date = $2::date
             ORDER BY date DESC LIMIT 1`,
            [d.id, dateQuery]
          );

          if (metricsRes.rows.length > 0) {
            const m = metricsRes.rows[0];
            return NextResponse.json({
              response: `üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡∏ï ${d.name} (${userState.province})\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${m.date.toISOString().split("T")[0]}\n- ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ô‡πâ‡∏≥: ${m.water_quality}\n- ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥: ${m.water_volume}\n- ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô: ${m.pressure}\n- ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: ${m.efficiency}\n\nüëâ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏†‡∏≤‡∏Ñ‡∏≠‡∏∑‡πà‡∏ô'`,
            });
          } else {
            return NextResponse.json({
              response: `‚õî ‡πÄ‡∏Ç‡∏ï ${d.name} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${dateQuery}\nüëâ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏†‡∏≤‡∏Ñ‡∏≠‡∏∑‡πà‡∏ô'`,
            });
          }
        }
        return NextResponse.json({
          response: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö",
        });
      }

      // üü¢ Step 4: ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô district ‡πÅ‡∏•‡πâ‡∏ß
      if (userState.step === "district") {
        return NextResponse.json({
          response: `‚ÑπÔ∏è ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡∏ï ${userState.district} ‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏£‡∏±‡∏ö\nüëâ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏†‡∏≤‡∏Ñ‡∏≠‡∏∑‡πà‡∏ô'`,
        });
      }
    } finally {
      client.release();
    }

    return NextResponse.json({
      response: "ü§ñ ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠'",
    });
  } catch (err) {
    console.error("Chatbot error:", err);
    return NextResponse.json({
      response: "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö",
    });
  }
}
